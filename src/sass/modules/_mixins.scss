// $breakpoint variables are imported from the _config.scss partial file, they are considered global variables

@mixin responsive($breakpoint, $orientation: portrait){
    @if ($breakpoint == 'sm-phone') {
        @media (max-width: $sm-phone) and (orientation: $orientation) { @content };
    }
    @if ($breakpoint == 'lg-phone') {
        @media (min-width: $lg-phone ) and (orientation: $orientation) { @content };
    }
    @if ($breakpoint == 'tablet') {
        @media (min-width: $tablet) and (orientation: $orientation) { @content };
    }
    @if ($breakpoint == 'laptop') {
        @media (min-width: $laptop) and (orientation: $orientation) { @content };
    }
    @if ($breakpoint == 'desktop') {
        @media (min-width: $desktop) { @content };
    }
}

@mixin justify($position) {
    @if $position == 'start' {
        justify-content: start;
    }
    @if $position == 'center' {
        justify-content: center;
    }
    @if $position == 'end' {
        justify-content: end;
    }
    @if $position == 'space-around'{
        justify-content: space-around;
    }
    @if $position == 'space-between'{
        justify-content: space-between;
    }
}

@mixin align-items($alignment) {
    @if $alignment == 'baseline'{
        align-items: baseline;
    }
    @if $alignment == 'center' {
        align-items: center;
    }
    @if $alignment == 'end' {
        align-items: flex-end;        
    }
    @if $alignment == 'start' {
        align-items: flex-start;        
    }
    
}


// @mixin align-items($alignment){
//     @if $alignment == {}
// }

@mixin flex-direction($direction) {
    @if $direction == 'row' {
        flex-direction: row;
        align-items: baseline;
    }
    @if $direction == 'column' {
        flex-direction:column;
        align-items: baseline;
    }
    
}

/* Define the mixin */
@mixin fluid-typography($minFont,$maxFont,$minBreakpoint,$maxBreakpoint) {
  
    /* Define variable for media query */
    $maxLessOne: $maxBreakpoint - 1;
    
    /* Define variable for fallback */
    $avg: ($maxFont + $minFont) / 2;
   
    /* Base font size */
    font-size: #{$minFont}px;
    
    @media (min-width: #{$minBreakpoint}px) and (max-width: #{$maxLessOne}px) {
      
      /* Adds a fallback for unsupported browsers */
      font-size: #{$avg}px;
        
      /* The fluid typography magic ðŸŒŸ  */
      font-size: calc(#{$minFont}px + (#{$maxFont} - #{$minFont}) * (100vw - #{$minBreakpoint}px) / (#{$maxBreakpoint} - #{$minBreakpoint}))
    }
    
    @media (min-width: #{$maxBreakpoint}px) {
      font-size: #{$maxFont}px;
    }
  }